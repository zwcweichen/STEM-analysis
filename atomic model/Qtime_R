# Load required libraries
library(plotly)
library(dplyr)
library(tidyr)
library(purrr)

# Create sample dataset matching your screenshot
dataset <- data.frame(
  OPE_NO = rep(c(155, 180, 190, 200, 215), each = 4),
  WEEK = rep(paste0("W", 513:516), 5),
  AVG_WAIT = c(
    35, 36, 38, 35,  # Site 155
    33, 33.5, 34, 33,  # Site 180
    40, 40, 40, 40,  # Site 190
    15, 15, 13, 15,  # Site 200
    48, 50, 47, 48   # Site 215
  ),
  MAX_WAIT = c(
    16, 60, 50, 16,  # Site 155
    30, 34.5, 35, 28,  # Site 180
    55, 56, 52, 55,  # Site 190
    65, 60, 20, 65,  # Site 200
    70, 60, 52, 70   # Site 215
  )
)

# Get unique sites
unique_sites <- unique(dataset$OPE_NO)
cat("Number of unique sites:", length(unique_sites), "\n")
cat("Site list:", paste(unique_sites, collapse=", "), "\n")

# Define which sites should show y-axis titles (first column of each row)
show_y_titles <- c(TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)

# Function to create a subplot for each site
create_site_plot <- function(site_id, show_legend = FALSE, show_y_title = FALSE, show_x_label = FALSE) {
  # Filter data for current site
  site_data <- dataset %>% 
    filter(OPE_NO == site_id) %>%
    arrange(WEEK)
  
  # Calculate y-axis range based on this site's data only
  y_min <- 0  # Starting from 0
  y_max <- max(site_data$MAX_WAIT, na.rm = TRUE) * 1.1  # Add 10% margin
  
  # Create the plot
  p <- plot_ly(data = site_data) %>%
    add_trace(
      x = ~WEEK, 
      y = ~AVG_WAIT, 
      type = 'scatter', 
      mode = 'lines+markers',
      line = list(shape = 'spline', smoothing = 1.3, width = 3, color = 'blue'),
      marker = list(size = 8, color = 'blue'),
      name = 'AVG_WAIT',
      showlegend = show_legend
    ) %>%
    add_trace(
      x = ~WEEK, 
      y = ~MAX_WAIT, 
      type = 'scatter', 
      mode = 'lines+markers',
      line = list(shape = 'spline', smoothing = 1.3, width = 3, color = 'red'),
      marker = list(size = 8, color = 'red'),
      name = 'MAX_WAIT',
      showlegend = show_legend
    ) %>%
    layout(
      title = list(
        text = paste0('<b>Site ', site_id, '</b>'),
        font = list(size = 14),
        y = 0.9
      ),
      xaxis = list(
        title = if(show_x_label) "Week" else "",
        tickangle = 45,
        tickfont = list(size = 11)
      ),
      yaxis = list(
        title = if(show_y_title) "Wait Time" else "",
        range = c(y_min, y_max)
      ),
      hovermode = 'closest',
      margin = list(t = 40, r = 10, b = if(show_x_label) 40 else 25, l = if(show_y_title) 50 else 20)
    )
  
  return(p)
}

# Set fixed layout
n_rows <- 2
n_cols <- 5

# Create plot list
plot_list <- lapply(seq_along(unique_sites), function(i) {
  site_id <- unique_sites[i]
  # Only show legend in top-right corner (last plot of first row)
  show_legend <- (i == n_cols)
  # Only show y titles for the first plot in each row
  show_y_title <- show_y_titles[i]
  # Only show x labels for the bottom row
  show_x_label <- (i > (n_rows-1) * n_cols)
  create_site_plot(site_id, show_legend, show_y_title, show_x_label)
})

# Create combined plot
tryCatch({
  combined_plot <- subplot(
    plot_list,
    nrows = n_rows,
    shareY = FALSE,  # Don't share Y axis range
    shareX = FALSE, 
    titleX = TRUE,
    titleY = TRUE,
    margin = 0.04
  ) %>%
    layout(
      title = list(
        text = '<b>Wait Time Trends by Site</b>',
        font = list(size = 18),
        y = 0.98
      ),
      showlegend = TRUE,
      legend = list(
        orientation = 'h',
        x = 0.99,          # Move legend to right side
        y = 0.95,          # Position below the main title
        xanchor = 'right', # Anchor to right side
        yanchor = 'top',   # Anchor to top
        font = list(size = 12)
      ),
      margin = list(t = 80, l = 40, r = 10, b = 40)
    )
  
  # Display the plot
  print(combined_plot)
  
}, error = function(e) {
  cat("Error creating subplots:", e$message, "\n")
  cat("Trying alternative method...\n")
  
  # Fallback method
  simple_plot <- create_site_plot(unique_sites[1], TRUE, TRUE, TRUE)
  print(simple_plot)
})

# 加载必要的库
library(plotly)
library(dplyr)
library(tidyr)
library(purrr)

# 创建测试数据集（替代读取Excel文件）
dataset <- data.frame(
  OPE_NO = rep(c("站点1", "站点2", "站点3", "站点4", "站点5", 
                 "站点6", "站点7", "站点8", "站点9", "站点10"), each = 5),
  WEEK = rep(paste0("W", 513:517), 10),
  AVG_WAIT = round(runif(50, 2, 10), 2),
  MAX_WAIT = round(runif(50, 8, 20), 2)
)

# 查看数据前几行
head(dataset)

# 计算唯一站点数量
unique_sites <- unique(dataset$OPE_NO)
cat("一共有", length(unique_sites), "个不同的站点\n")
cat("站点编号列表:", paste(unique_sites, collapse=", "), "\n")

# 创建一个函数来为每个站点生成子图
create_site_plot <- function(site_id) {
  # 过滤出当前站点的数据并按WEEK排序
  site_data <- dataset %>% 
    filter(OPE_NO == site_id) %>%
    arrange(WEEK)
  
  # 创建交互式图表
  p <- plot_ly(data = site_data) %>%
    add_trace(
      x = ~WEEK, 
      y = ~AVG_WAIT, 
      type = 'scatter', 
      mode = 'lines+markers',
      line = list(shape = 'spline', smoothing = 1.3, width = 3, color = 'blue'),
      marker = list(size = 8, color = 'blue'),
      name = 'AVG_WAIT'
    ) %>%
    add_trace(
      x = ~WEEK, 
      y = ~MAX_WAIT, 
      type = 'scatter', 
      mode = 'lines+markers',
      line = list(shape = 'spline', smoothing = 1.3, width = 3, color = 'red'),
      marker = list(size = 8, color = 'red'),
      name = 'MAX_WAIT'
    ) %>%
    layout(
      title = paste0('站点 ', site_id, ' 等待时间'),
      xaxis = list(title = '周', tickangle = 45),
      yaxis = list(title = '等待时间'),
      hovermode = 'closest',
      showlegend = TRUE
    )
  
  return(p)
}

# 智能计算子图布局函数
calculate_optimal_layout <- function(n) {
  # 获取所有可能的因数对
  factors <- list()
  for (i in 1:floor(sqrt(n))) {
    if (n %% i == 0) {
      factors[[length(factors) + 1]] <- c(i, n/i)
    }
  }
  
  # 如果完全没有因数对（如质数），则使用接近的数字
  if (length(factors) == 0) {
    cols <- floor(sqrt(n))
    rows <- ceiling(n/cols)
    return(c(rows, cols))
  }
  
  # 在所有因数对中找出行和列差距最小的
  min_diff <- Inf
  best_layout <- c(1, n)  # 默认为1行n列
  
  for (f in factors) {
    diff <- abs(f[1] - f[2])
    if (diff < min_diff) {
      min_diff <- diff
      # 通常我们希望列数大于行数，更符合宽屏显示习惯
      if (f[2] >= f[1]) {
        best_layout <- c(f[1], f[2])  # 行,列
      } else {
        best_layout <- c(f[2], f[1])  # 行,列
      }
    }
  }
  
  # 对于10个站点的特殊情况，手动返回2行5列
  if (n == 10) {
    return(c(2, 5))
  }
  
  return(best_layout)
}

# 方案1: 使用智能布局算法处理多达25个站点
if(length(unique_sites) <= 25) {
  # 使用优化的布局算法
  layout_dims <- calculate_optimal_layout(length(unique_sites))
  n_rows <- layout_dims[1]
  n_cols <- layout_dims[2]
  
  cat("为", length(unique_sites), "个站点计算的最佳布局是:", n_rows, "行 x", n_cols, "列\n")
  
  # 创建一个包含所有子图的列表
  plot_list <- map(unique_sites, create_site_plot)
  
  # 合并为一个大图表
  combined_plot <- subplot(
    plot_list,
    nrows = n_rows,
    ncols = n_cols,  # 显式指定列数
    shareX = FALSE,
    shareY = FALSE,
    titleX = TRUE,
    titleY = TRUE
  ) %>%
    layout(
      title = '各站点等待时间趋势',
      showlegend = TRUE,
      legend = list(orientation = 'h', x = 0.5, y = 1.05, xanchor = 'center'),
      margin = list(t = 80)
    )
  
  # 显示图表
  print(combined_plot)
  
  # 可选：保存图表为HTML文件，这样可以在浏览器中交互
  # htmlwidgets::saveWidget(combined_plot, "站点等待时间趋势.html")
} else {
  # 方案2: 如果站点太多，创建一个带有下拉选择器的图表
  # 创建一个初始图表
  initial_site <- unique_sites[1]
  initial_plot <- create_site_plot(initial_site)
  
  # 添加下拉选择器
  site_dropdown <- list(
    buttons = map(unique_sites, function(site) {
      list(
        method = "update",
        args = list(
          list(visible = rep(FALSE, length(unique_sites) * 2)),
          list(title = paste0('站点 ', site, ' 等待时间'))
        ),
        label = paste0('站点 ', site)
      )
    }),
    direction = "down",
    active = 0,
    x = 0.1,
    y = 1.15,
    xanchor = 'left',
    yanchor = 'top'
  )
  
  # 修复下拉选择器的visible属性设置
  for(i in seq_along(unique_sites)) {
    site <- unique_sites[i]
    # 更新该站点的visible属性
    visible_vec <- rep(FALSE, length(unique_sites) * 2)
    visible_vec[(i-1)*2 + 1] <- TRUE  # AVG_WAIT trace
    visible_vec[(i-1)*2 + 2] <- TRUE  # MAX_WAIT trace
    site_dropdown$buttons[[i]]$args[[1]] <- list(visible = visible_vec)
  }
  
  # 应用下拉选择器
  dropdown_plot <- initial_plot %>%
    layout(
      updatemenus = list(site_dropdown),
      margin = list(t = 120)
    )
  
  # 为所有其他站点创建隐藏的轨迹
  for(i in 2:length(unique_sites)) {
    site_data <- dataset %>% 
      filter(OPE_NO == unique_sites[i]) %>%
      arrange(WEEK)
    
    dropdown_plot <- dropdown_plot %>%
      add_trace(
        x = site_data$WEEK, 
        y = site_data$AVG_WAIT, 
        type = 'scatter', 
        mode = 'lines+markers',
        line = list(shape = 'spline', smoothing = 1.3, width = 3, color = 'blue'),
        marker = list(size = 8, color = 'blue'),
        name = 'AVG_WAIT',
        visible = FALSE
      ) %>%
      add_trace(
        x = site_data$WEEK, 
        y = site_data$MAX_WAIT, 
        type = 'scatter', 
        mode = 'lines+markers',
        line = list(shape = 'spline', smoothing = 1.3, width = 3, color = 'red'),
        marker = list(size = 8, color = 'red'),
        name = 'MAX_WAIT',
        visible = FALSE
      )
  }
  
  # 显示图表
  print(dropdown_plot)
  
  # 可选：保存图表为HTML文件
  # htmlwidgets::saveWidget(dropdown_plot, "站点等待时间趋势.html")
}

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import os

def read_excel_sheets(excel_file_path, sheet_aei='AEI', sheet_adi='ADI'):
    """
    读取Excel文件的两个分页
    
    Parameters:
    excel_file_path: Excel文件路径
    sheet_aei: AEI分页名称
    sheet_adi: ADI分页名称
    
    Returns:
    df_aei, df_adi: 两个DataFrame
    """
    try:
        # 读取两个分页
        df_aei = pd.read_excel(excel_file_path, sheet_name=sheet_aei)
        df_adi = pd.read_excel(excel_file_path, sheet_name=sheet_adi)
        
        print(f"成功读取Excel文件: {excel_file_path}")
        print(f"AEI分页数据: {len(df_aei)} 行")
        print(f"ADI分页数据: {len(df_adi)} 行")
        
        # 显示列名
        print(f"\nAEI分页列名: {list(df_aei.columns)}")
        print(f"ADI分页列名: {list(df_adi.columns)}")
        
        return df_aei, df_adi
        
    except Exception as e:
        print(f"读取Excel文件时出错: {e}")
        return None, None

def calculate_cd_difference(df_aei, df_adi, coordinate_col='Coordinate', cd_col='CD', 
                          location_x_col='Location x', location_y_col='Location y'):
    """
    根据相同的Coordinate计算CD差值 (AEI - ADI)
    
    Parameters:
    df_aei, df_adi: 两个DataFrame
    coordinate_col: 坐标列名
    cd_col: CD测量值列名
    location_x_col, location_y_col: 位置坐标列名
    
    Returns:
    df_result: 包含差值结果的DataFrame
    """
    try:
        # 确保必要的列存在
        required_cols = [coordinate_col, cd_col, location_x_col, location_y_col]
        
        for col in required_cols:
            if col not in df_aei.columns:
                print(f"AEI分页缺少列: {col}")
                return None
            if col not in df_adi.columns:
                print(f"ADI分页缺少列: {col}")
                return None
        
        # 清理数据，移除NaN值
        df_aei_clean = df_aei.dropna(subset=required_cols).copy()
        df_adi_clean = df_adi.dropna(subset=required_cols).copy()
        
        # 将Coordinate转换为字符串以确保匹配
        df_aei_clean[coordinate_col] = df_aei_clean[coordinate_col].astype(str)
        df_adi_clean[coordinate_col] = df_adi_clean[coordinate_col].astype(str)
        
        # 根据Coordinate进行合并
        merged_df = pd.merge(df_aei_clean, df_adi_clean, 
                           on=coordinate_col, 
                           suffixes=('_AEI', '_ADI'))
        
        # 计算CD差值 (AEI - ADI)
        merged_df['CD_Difference'] = merged_df[f'{cd_col}_AEI'] - merged_df[f'{cd_col}_ADI']
        
        # 创建结果DataFrame
        result_df = pd.DataFrame({
            'Coordinate': merged_df[coordinate_col],
            'Location_X': merged_df[f'{location_x_col}_AEI'],  # 使用AEI的位置数据
            'Location_Y': merged_df[f'{location_y_col}_AEI'],
            'CD_AEI': merged_df[f'{cd_col}_AEI'],
            'CD_ADI': merged_df[f'{cd_col}_ADI'],
            'CD_Difference': merged_df['CD_Difference'],
            'CD_Difference_Abs': np.abs(merged_df['CD_Difference']),
            'CD_Difference_Percent': (merged_df['CD_Difference'] / merged_df[f'{cd_col}_ADI']) * 100
        })
        
        print(f"\n=== CD差值计算结果 ===")
        print(f"匹配的数据点: {len(result_df)}")
        print(f"AEI原始数据点: {len(df_aei_clean)}")
        print(f"ADI原始数据点: {len(df_adi_clean)}")
        print(f"匹配率: {len(result_df)/min(len(df_aei_clean), len(df_adi_clean))*100:.1f}%")
        
        print(f"\n=== CD差值统计 ===")
        print(f"平均差值: {result_df['CD_Difference'].mean():.3f}")
        print(f"标准差: {result_df['CD_Difference'].std():.3f}")
        print(f"最大差值: {result_df['CD_Difference'].max():.3f}")
        print(f"最小差值: {result_df['CD_Difference'].min():.3f}")
        print(f"绝对平均差值: {result_df['CD_Difference_Abs'].mean():.3f}")
        
        return result_df
        
    except Exception as e:
        print(f"计算CD差值时出错: {e}")
        return None

def plot_cd_difference_map(result_df, title="CD Difference Map (AEI - ADI)", figsize=(14, 10)):
    """
    绘制CD差值的wafer map
    """
    if result_df is None or len(result_df) == 0:
        print("没有数据可以绘制")
        return None
    
    # 创建颜色映射（差值用红蓝色系）
    colors_diff = ['#000080', '#0080FF', '#FFFFFF', '#FF8000', '#FF0000']
    cmap_diff = LinearSegmentedColormap.from_list('cd_difference', colors_diff, N=256)
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)
    
    # 提取数据
    x = result_df['Location_X'].values
    y = result_df['Location_Y'].values
    diff = result_df['CD_Difference'].values
    
    # 左图：CD差值分布
    scatter1 = ax1.scatter(x, y, c=diff, s=60, cmap=cmap_diff, 
                          edgecolors='black', linewidth=0.5, alpha=0.8)
    
    # 添加数值标签
    for i, (xi, yi, di) in enumerate(zip(x, y, diff)):
        color = 'white' if abs(di) > np.std(diff) else 'black'
        ax1.text(xi, yi-8, f'{di:.1f}', ha='center', va='center', 
                fontsize=7, fontweight='bold', color=color)
    
    ax1.set_title('CD Difference (AEI - ADI)', fontsize=12, fontweight='bold')
    ax1.set_xlabel('Location X (mm)', fontsize=10)
    ax1.set_ylabel('Location Y (mm)', fontsize=10)
    ax1.grid(True, alpha=0.3)
    ax1.set_aspect('equal')
    
    # 添加colorbar
    cbar1 = plt.colorbar(scatter1, ax=ax1, shrink=0.8)
    cbar1.set_label('CD Difference (nm)', fontsize=10)
    
    # 右图：绝对差值分布
    abs_diff = np.abs(diff)
    scatter2 = ax2.scatter(x, y, c=abs_diff, s=60, cmap='Reds', 
                          edgecolors='black', linewidth=0.5, alpha=0.8)
    
    # 添加数值标签
    for i, (xi, yi, adi) in enumerate(zip(x, y, abs_diff)):
        color = 'white' if adi > np.mean(abs_diff) else 'black'
        ax2.text(xi, yi-8, f'{adi:.1f}', ha='center', va='center', 
                fontsize=7, fontweight='bold', color=color)
    
    ax2.set_title('Absolute CD Difference |AEI - ADI|', fontsize=12, fontweight='bold')
    ax2.set_xlabel('Location X (mm)', fontsize=10)
    ax2.set_ylabel('Location Y (mm)', fontsize=10)
    ax2.grid(True, alpha=0.3)
    ax2.set_aspect('equal')
    
    # 添加colorbar
    cbar2 = plt.colorbar(scatter2, ax=ax2, shrink=0.8)
    cbar2.set_label('Absolute CD Difference (nm)', fontsize=10)
    
    plt.tight_layout()
    return fig

def plot_cd_comparison_scatter(result_df, figsize=(12, 5)):
    """
    绘制AEI vs ADI的散点图比较
    """
    if result_df is None or len(result_df) == 0:
        print("没有数据可以绘制")
        return None
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)
    
    aei_vals = result_df['CD_AEI'].values
    adi_vals = result_df['CD_ADI'].values
    diff_vals = result_df['CD_Difference'].values
    
    # 左图：AEI vs ADI散点图
    ax1.scatter(adi_vals, aei_vals, c=diff_vals, s=50, alpha=0.7, 
               edgecolors='black', linewidth=0.5, cmap='RdBu_r')
    
    # 添加1:1线
    min_val = min(np.min(aei_vals), np.min(adi_vals))
    max_val = max(np.max(aei_vals), np.max(adi_vals))
    ax1.plot([min_val, max_val], [min_val, max_val], 'k--', alpha=0.5, linewidth=2)
    
    ax1.set_xlabel('ADI CD (nm)', fontsize=11)
    ax1.set_ylabel('AEI CD (nm)', fontsize=11)
    ax1.set_title('AEI vs ADI Correlation', fontsize=12, fontweight='bold')
    ax1.grid(True, alpha=0.3)
    
    # 计算相关系数
    correlation = np.corrcoef(aei_vals, adi_vals)[0, 1]
    ax1.text(0.05, 0.95, f'相关系数: {correlation:.3f}', 
            transform=ax1.transAxes, fontsize=10, 
            bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
    
    # 右图：差值分布直方图
    ax2.hist(diff_vals, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
    ax2.axvline(np.mean(diff_vals), color='red', linestyle='--', linewidth=2, 
               label=f'平均值: {np.mean(diff_vals):.2f}')
    ax2.axvline(0, color='black', linestyle='-', linewidth=1, alpha=0.5)
    
    ax2.set_xlabel('CD Difference (AEI - ADI) [nm]', fontsize=11)
    ax2.set_ylabel('频次', fontsize=11)
    ax2.set_title('CD Difference Distribution', fontsize=12, fontweight='bold')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def save_results_to_excel(result_df, output_file_path):
    """
    将结果保存到新的Excel文件
    """
    try:
        with pd.ExcelWriter(output_file_path, engine='openpyxl') as writer:
            # 保存完整结果
            result_df.to_excel(writer, sheet_name='CD_Difference_Results', index=False)
            
            # 创建统计摘要
            summary_data = {
                '统计项目': ['数据点数量', '平均差值', '标准差', '最大差值', '最小差值', 
                           '绝对平均差值', '3σ上限', '3σ下限'],
                '数值': [len(result_df),
                        result_df['CD_Difference'].mean(),
                        result_df['CD_Difference'].std(),
                        result_df['CD_Difference'].max(),
                        result_df['CD_Difference'].min(),
                        result_df['CD_Difference_Abs'].mean(),
                        result_df['CD_Difference'].mean() + 3*result_df['CD_Difference'].std(),
                        result_df['CD_Difference'].mean() - 3*result_df['CD_Difference'].std()]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='Statistics_Summary', index=False)
            
        print(f"结果已保存到: {output_file_path}")
        
    except Exception as e:
        print(f"保存Excel文件时出错: {e}")

def analyze_excel_cd_difference(excel_file_path, output_dir=None):
    """
    完整的Excel CD差值分析流程
    
    Parameters:
    excel_file_path: 输入Excel文件路径
    output_dir: 输出目录（可选）
    """
    print("=== Excel CD差值分析 ===\n")
    
    # 读取Excel数据
    df_aei, df_adi = read_excel_sheets(excel_file_path)
    if df_aei is None or df_adi is None:
        return None
    
    # 计算CD差值
    result_df = calculate_cd_difference(df_aei, df_adi)
    if result_df is None:
        return None
    
    # 显示结果预览
    print(f"\n=== 结果预览 ===")
    print(result_df.head(10))
    
    # 生成可视化
    print(f"\n正在生成可视化图表...")
    
    # CD差值wafer map
    fig1 = plot_cd_difference_map(result_df)
    if fig1:
        plt.show()
    
    # 对比散点图
    fig2 = plot_cd_comparison_scatter(result_df)
    if fig2:
        plt.show()
    
    # 保存结果到Excel
    if output_dir is None:
        output_dir = os.path.dirname(excel_file_path)
    
    output_file = os.path.join(output_dir, "CD_Difference_Analysis_Results.xlsx")
    save_results_to_excel(result_df, output_file)
    
    return result_df

# 使用示例
if __name__ == "__main__":
    # 请将此路径替换为您的Excel文件路径
    excel_file_path = "your_excel_file.xlsx"  # 替换为您的文件路径
    
    try:
        # 执行完整分析
        result_df = analyze_excel_cd_difference(excel_file_path)
        
        if result_df is not None:
            print("\n=== 分析完成 ===")
            print("生成的文件:")
            print("1. CD差值wafer map")
            print("2. AEI vs ADI对比图")
            print("3. CD_Difference_Analysis_Results.xlsx")
            
    except FileNotFoundError:
        print(f"找不到文件: {excel_file_path}")
        print("请确认文件路径正确，并且文件包含'AEI'和'ADI'两个分页")
        
    except Exception as e:
        print(f"分析过程中出错: {e}")

# 快速使用函数
def quick_cd_difference_analysis(excel_file_path, sheet_aei='AEI', sheet_adi='ADI'):
    """
    快速CD差值分析
    
    Parameters:
    excel_file_path: Excel文件路径
    sheet_aei: AEI分页名称（默认'AEI'）
    sheet_adi: ADI分页名称（默认'ADI'）
    
    Returns:
    result_df: 分析结果DataFrame
    """
    df_aei, df_adi = read_excel_sheets(excel_file_path, sheet_aei, sheet_adi)
    if df_aei is None or df_adi is None:
        return None
    
    result_df = calculate_cd_difference(df_aei, df_adi)
    if result_df is None:
        return None
    
    # 生成基本可视化
    plot_cd_difference_map(result_df)
    plt.show()
    
    return result_df
